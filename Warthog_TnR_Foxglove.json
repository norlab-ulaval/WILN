{
  "configById": {
    "3D!2h4kfix": {
      "cameraState": {
        "perspective": true,
        "distance": 24.554753263072406,
        "phi": 42.643448819522874,
        "thetaOffset": 82.95302162459139,
        "targetOffset": [
          1.7901116780039255,
          -2.901821398961906,
          -5.659478404389994e-17
        ],
        "target": [
          0,
          0,
          0
        ],
        "targetOrientation": [
          0,
          0,
          0,
          1
        ],
        "fovy": 45,
        "near": 0.5,
        "far": 5000
      },
      "followMode": "follow-none",
      "scene": {
        "transforms": {
          "showLabel": false,
          "lineWidth": 0,
          "axisScale": 0
        },
        "enableStats": false
      },
      "transforms": {},
      "topics": {
        "/planned_trajectory_test": {
          "visible": true
        },
        "/real_trajectory_test": {
          "visible": true
        },
        "/ref_path": {
          "visible": false
        },
        "/target_path": {
          "visible": false
        },
        "/optimal_path": {
          "visible": false
        },
        "/rslidar32_points": {
          "visible": true,
          "colorField": "intensity",
          "colorMode": "colormap",
          "colorMap": "turbo"
        },
        "/map": {
          "visible": true,
          "colorField": "intensity",
          "colorMode": "colormap",
          "colorMap": "turbo"
        },
        "/lslidar_point_cloud_deskewed": {
          "visible": true,
          "colorField": "intensity",
          "colorMode": "colormap",
          "colorMap": "turbo"
        },
        "/robot_description": {
          "visible": false
        },
        "/real_trajectory_test1": {
          "visible": false
        }
      },
      "layers": {},
      "publish": {
        "type": "point",
        "poseTopic": "/move_base_simple/goal",
        "pointTopic": "/clicked_point",
        "poseEstimateTopic": "/initialpose",
        "poseEstimateXDeviation": 0.5,
        "poseEstimateYDeviation": 0.5,
        "poseEstimateThetaDeviation": 0.26179939
      },
      "imageMode": {}
    },
    "map!3a986e1": {
      "customTileUrl": "",
      "disabledTopics": [
        "/LocationFix",
        "/fix",
        "/geographic_path_end",
        "/geographic_path_start",
        "/geographic_robot_path"
      ],
      "followTopic": "",
      "layer": "satellite",
      "topicColors": {},
      "maxNativeZoom": 18,
      "center": {
        "lat": 46.77829363153993,
        "lon": -71.27481732577222
      },
      "zoomLevel": 17
    },
    "Tab!2l8wzyp": {
      "activeTabIdx": 0,
      "tabs": [
        {
          "title": "3D",
          "layout": "3D!2h4kfix"
        },
        {
          "title": "Satellite",
          "layout": "map!3a986e1"
        }
      ]
    },
    "CallService!ykcnio": {
      "requestPayload": "{}",
      "layout": "vertical",
      "timeoutSeconds": 10,
      "foxglovePanelTitle": "Start recording",
      "buttonColor": "#0b9000",
      "serviceName": "/start_recording",
      "editingMode": false,
      "buttonText": "Start recording"
    },
    "CallService!1juomu4": {
      "requestPayload": "{}",
      "layout": "horizontal",
      "timeoutSeconds": 10,
      "foxglovePanelTitle": "Play trajectory",
      "buttonColor": "#0b9000",
      "serviceName": "/play_line",
      "editingMode": false,
      "buttonText": "Play trajectory once"
    },
    "CallService!39pxkwk": {
      "requestPayload": "{}",
      "layout": "vertical",
      "timeoutSeconds": 10,
      "foxglovePanelTitle": "stop recording",
      "buttonColor": "#aa0000",
      "serviceName": "/stop_recording",
      "editingMode": false,
      "buttonText": "Stop recording"
    },
    "CallService!45oax4p": {
      "requestPayload": "{\n  \"nb_loops\": 3\n}",
      "layout": "vertical",
      "timeoutSeconds": 10,
      "foxglovePanelTitle": "Play loop trajectory",
      "buttonColor": "#1700ab",
      "serviceName": "/play_loop",
      "editingMode": true,
      "buttonText": "Play loop trajectory"
    },
    "CallService!uz1d3a": {
      "requestPayload": "{}",
      "layout": "vertical",
      "timeoutSeconds": 10,
      "foxglovePanelTitle": "Play loop trajectory",
      "buttonColor": "#d09c1f",
      "serviceName": "/cancel_trajectory",
      "editingMode": false,
      "buttonText": "Cancel trajectory"
    },
    "CallService!351yhg3": {
      "requestPayload": "{}",
      "layout": "horizontal",
      "timeoutSeconds": 10,
      "foxglovePanelTitle": "Clear trajectory",
      "buttonColor": "#aa0000",
      "serviceName": "/clear_trajectory",
      "editingMode": false,
      "buttonText": "Clear trajectory"
    },
    "Indicator!7lb452": {
      "path": "/wiln/status.ok",
      "style": "background",
      "fallbackColor": "#ff0000",
      "fallbackLabel": "Error",
      "rules": [
        {
          "operator": "=",
          "rawValue": "true",
          "color": "#68e24a",
          "label": "Ok"
        }
      ]
    },
    "RawMessages!4gsut6l": {
      "diffEnabled": false,
      "diffMethod": "custom",
      "diffTopicPath": "",
      "showFullMessageForDiff": false,
      "topicPath": "/wiln/status.message",
      "fontSize": 24
    }
  },
  "globalVariables": {
    "": "\"\""
  },
  "userNodes": {
    "88743478-bc6c-4c28-bec7-5feaa4f5a52d": {
      "sourceCode": "// The ./types module provides helper types for your Input events and messages.\nimport { Input, Message } from \"./types\";\n\n\n// Your script can output well-known message types, any of your custom message types, or\n// complete custom message types.\n//\n// Use `Message` to access types from the schemas defined in your data source:\n// type Twist = Message<\"geometry_msgs/Twist\">;\n//\n// Import from the @foxglove/schemas package to use foxglove schema types:\n// import { Pose, LocationFix } from \"@foxglove/schemas\";\n//\n// Conventionally, it's common to make a _type alias_ for your script's output type\n// and use that type name as the return type for your script function.\n// Here we've called the type `Output` but you can pick any type name.\ntype Output = {\n  hello: string;\n};\n\n// These are the topics your script \"subscribes\" to. Studio will invoke your script function\n// when any message is received on one of these topics.\nexport const inputs = [\"/input/topic\"];\n\n// Any output your script produces is \"published\" to this topic. Published messages are only visible within Studio, not to your original data source.\nexport const output = \"/studio_script/output_topic\";\n\n// This function is called with messages from your input topics.\n// The first argument is an event with the topic, receive time, and message.\n// Use the `Input<...>` helper to get the correct event type for your input topic messages.\nexport default function script(event: Input<\"/input/topic\">): Output {\n  return {\n    hello: \"world!\",\n  };\n};",
      "name": "88743478"
    }
  },
  "playbackConfig": {
    "speed": 1
  },
  "layout": {
    "first": {
      "first": {
        "first": {
          "first": "Tab!2l8wzyp",
          "second": {
            "first": "CallService!ykcnio",
            "second": "CallService!1juomu4",
            "direction": "column"
          },
          "direction": "row",
          "splitPercentage": 88.77441504268918
        },
        "second": {
          "first": "CallService!39pxkwk",
          "second": "CallService!45oax4p",
          "direction": "column"
        },
        "direction": "row",
        "splitPercentage": 86.3013698630137
      },
      "second": {
        "first": "CallService!uz1d3a",
        "second": "CallService!351yhg3",
        "direction": "column"
      },
      "direction": "row",
      "splitPercentage": 92.52217997465145
    },
    "second": {
      "first": "Indicator!7lb452",
      "second": "RawMessages!4gsut6l",
      "direction": "row"
    },
    "direction": "column",
    "splitPercentage": 87.78004073319755
  }
}